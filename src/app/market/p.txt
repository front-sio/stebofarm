"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { BsCart4 } from "react-icons/bs";

// Interface Definitions
interface Product {
  id: number;
  image: string;
  title: string;
  description: string;
  originalPrice: string; // Price in TZS
  discountedPrice: string; // Price in TZS
  seller: string;
  minOrder: string;
  maxOrder: string;
}

interface CartItem extends Product {
  quantity: number;
}

const products: Product[] = [
  {
    id: 1,
    image: "https://via.placeholder.com/247x218",
    title: "Fresh Mangoes",
    description: "Sweet and juicy mangoes from the farm.",
    originalPrice: "TSh 15000", // Price in TZS
    discountedPrice: "TSh 12000", // Price in TZS
    seller: "Sold by: Fresh Farms",
    minOrder: "1 kg",
    maxOrder: "20 kg",
  },
  {
    id: 2,
    image: "https://via.placeholder.com/247x218",
    title: "Organic Apples",
    description: "Crisp and fresh organic apples.",
    originalPrice: "TSh 10000", // Price in TZS
    discountedPrice: "TSh 8000", // Price in TZS
    seller: "Sold by: Apple Orchard",
    minOrder: "1 kg",
    maxOrder: "10 kg",
  },
];

// Product Card Component
const ProductCard: React.FC<{
  product: Product;
  onAddToCart: (product: Product) => void;
  onViewDetails: (productId: number) => void;
}> = ({ product, onAddToCart, onViewDetails }) => (
  <div className="w-full sm:w-[247px] h-[380px] bg-white shadow rounded-lg flex flex-col">
    <img
      className="w-full h-[218px] rounded-t-lg object-cover"
      src={product.image}
      alt={product.title}
    />
    <div className="p-3 flex-grow">
      <h3 className="text-[15px] font-medium capitalize">{product.title}</h3>
      <p className="text-[8px] text-gray-600">{product.description}</p>
      <div className="flex justify-between items-center mt-2">
        <span className="line-through text-gray-400 text-xs">{product.originalPrice}</span>
        <span className="text-black font-medium text-[11px]">{product.discountedPrice}</span>
      </div>
      <p className="text-[7px] text-gray-500 mt-1">{product.seller}</p>
    </div>
    <div className="flex">
      <button
        className="w-1/2 py-1 bg-primary rounded-bl-lg text-[10px]"
        onClick={() => onViewDetails(product.id)}
      >
        View Details
      </button>
      <button
        className="w-1/2 py-1 bg-red rounded-br-lg text-[10px] text-white"
        onClick={() => onAddToCart(product)}
      >
        Add to Cart
      </button>
    </div>
  </div>
);

// Cart Component
const Cart: React.FC<{
  cartItems: CartItem[];
  onCheckout: () => void;
}> = ({ cartItems, onCheckout }) => (
  <div className="p-4 bg-gray-100 rounded-lg">
    <h2 className="text-lg font-bold mb-4">Cart</h2>
    {cartItems.length === 0 ? (
      <p>Your cart is empty.</p>
    ) : (
      <ul className="space-y-4">
        {cartItems.map((item) => (
          <li key={item.id} className="flex justify-between items-center">
            <span>{item.title} (x{item.quantity})</span>
            <span>{item.discountedPrice}</span>
          </li>
        ))}
      </ul>
    )}
    <button
      className="mt-4 py-2 px-4 bg-green-500 text-white rounded"
      onClick={onCheckout}
    >
      Proceed to Checkout
    </button>
  </div>
);

// Main Market Component
const Market: React.FC = () => {
  const router = useRouter();
  const [cart, setCart] = useState<CartItem[]>([]);
  const [isCartOpen, setIsCartOpen] = useState(false);

  // Load cart from localStorage on component mount
  useEffect(() => {
    const storedCart = localStorage.getItem("cart");
    if (storedCart) {
      setCart(JSON.parse(storedCart));
    }
  }, []);

  // Save cart to localStorage every time it changes
  useEffect(() => {
    if (cart.length > 0) {
      localStorage.setItem("cart", JSON.stringify(cart));
    }
  }, [cart]);

  const handleAddToCart = (product: Product) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === product.id);
      if (existingItem) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevCart, { ...product, quantity: 1 }];
    });
  };

  const handleViewDetails = (productId: number) => {
    router.push(`/products/${productId}`);
  };

  const handleCheckout = () => {
    if (cart.length > 0) {
      // Proceed to the checkout page
      router.push("/checkout");
    } else {
      alert("Your cart is empty. Please add some items to the cart.");
    }
  };

  const toggleCart = () => {
    setIsCartOpen(!isCartOpen);
  };

  return (
    <div className="container mx-auto p-16">
      {/* Cart Icon */}
      <div
        className="fixed top-24 right-4 cursor-pointer flex items-center justify-center bg-red text-white p-3 rounded-full shadow-lg transition-transform transform hover:scale-110 hover:bg-red-600"
        onClick={toggleCart}
      >
        <BsCart4 size={24} className="relative" />
        {cart.length > 0 && (
          <span className="absolute top-0 right-10 bg-foreground text-white text-xs font-bold rounded-full w-8 h-8 flex items-center justify-center">
            {cart.length}
          </span>
        )}
      </div>

      {/* Product Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {products.map((product) => (
          <ProductCard
            key={product.id}
            product={product}
            onAddToCart={handleAddToCart}
            onViewDetails={handleViewDetails}
          />
        ))}
      </div>

      {/* Cart Side Panel */}
      {isCartOpen && (
        <div
          className="fixed inset-0 top-20 bg-gray-800 bg-opacity-50 z-50"
          onClick={toggleCart}
        >
          <div
            className="absolute right-0 top-0 bg-white w-[600px] h-full p-6"
            onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside the cart
          >
            <button
              className="text-white bg-red text-xl absolute top-4 right-4 p-2 rounded-full"
              onClick={toggleCart}
            >
              &times;
            </button>

            <div className="absolute top-16 w-[90%]">
              <Cart cartItems={cart} onCheckout={handleCheckout} />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Market;
